/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package restaurant.swagger.api;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import restaurant.swagger.model.Document;
import restaurant.swagger.model.ErrorResponse;
import restaurant.swagger.model.ResponseRest;
import restaurant.swagger.model.ValidationResponse;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-01-02T23:40:43.246+05:00")

@Api(value = "document", description = "the document API")
public interface DocumentApi {

    @ApiOperation(value = "addDocument ", notes = "", response = ResponseRest.class, tags={ "document-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseRest.class),
        @ApiResponse(code = 400, message = "Error", response = ErrorResponse.class),
        @ApiResponse(code = 480, message = "ValidationError", response = ValidationResponse.class) })
    
    @RequestMapping(value = "/document/add",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<ResponseRest> addDocumentUsingPUT(@ApiParam(value = "document" ,required=true )  @Valid @RequestBody Document document) {
        // do some magic!
        return new ResponseEntity<ResponseRest>(HttpStatus.OK);
    }


    @ApiOperation(value = "deleteDocument", notes = "", response = ResponseRest.class, tags={ "document-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseRest.class),
        @ApiResponse(code = 204, message = "No Content", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class) })
    
    @RequestMapping(value = "/document/delete/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<ResponseRest> deleteDocumentUsingDELETE(@ApiParam(value = "id",required=true ) @PathVariable("id") String id) {
        // do some magic!
        return new ResponseEntity<ResponseRest>(HttpStatus.OK);
    }


    @ApiOperation(value = "getDocumentById", notes = "", response = ResponseRest.class, tags={ "document-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseRest.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/document/get/id/{id}",
        produces = { "application/json;charset=utf-8" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseRest> getDocumentByIdUsingGET(@ApiParam(value = "id",required=true ) @PathVariable("id") String id) {
        // do some magic!
        return new ResponseEntity<ResponseRest>(HttpStatus.OK);
    }


    @ApiOperation(value = "getDocumentListByName", notes = "", response = Document.class, responseContainer = "List", tags={ "document-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Document.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/document/get/name/{name}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Document>> getDocumentListByNameUsingGET(@ApiParam(value = "name",required=true ) @PathVariable("name") String name) {
        // do some magic!
        return new ResponseEntity<List<Document>>(HttpStatus.OK);
    }


    @ApiOperation(value = "getDocumentList", notes = "", response = Document.class, responseContainer = "List", tags={ "document-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Document.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/document/all",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Document>> getDocumentListUsingGET() {
        // do some magic!
        return new ResponseEntity<List<Document>>(HttpStatus.OK);
    }


    @ApiOperation(value = "updateDocument", notes = "", response = ResponseRest.class, tags={ "document-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseRest.class),
        @ApiResponse(code = 201, message = "Created", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/document/update",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResponseRest> updateDocumentUsingPUT(@ApiParam(value = "document" ,required=true )  @Valid @RequestBody Document document) {
        // do some magic!
        return new ResponseEntity<ResponseRest>(HttpStatus.OK);
    }

}
