/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package restaurant.swagger.api;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import restaurant.swagger.model.ResponseRest;
import restaurant.swagger.model.TableBooking;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-01-02T23:40:43.246+05:00")

@Api(value = "booking", description = "the booking API")
public interface BookingApi {

    @ApiOperation(value = "bookTable", notes = "", response = ResponseRest.class, tags={ "table-booking-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseRest.class),
        @ApiResponse(code = 201, message = "Created", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/booking/add",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<ResponseRest> bookTableUsingPUT(@ApiParam(value = "tableBooking" ,required=true )  @Valid @RequestBody TableBooking tableBooking) {
        // do some magic!
        return new ResponseEntity<ResponseRest>(HttpStatus.OK);
    }


    @ApiOperation(value = "deleteBooking", notes = "", response = ResponseRest.class, tags={ "table-booking-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseRest.class),
        @ApiResponse(code = 204, message = "No Content", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class) })
    
    @RequestMapping(value = "/booking/delete/id/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<ResponseRest> deleteBookingUsingDELETE(@ApiParam(value = "id",required=true ) @PathVariable("id") String id) {
        // do some magic!
        return new ResponseEntity<ResponseRest>(HttpStatus.OK);
    }


    @ApiOperation(value = "getAllTableBookings", notes = "", response = ResponseRest.class, responseContainer = "List", tags={ "table-booking-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseRest.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/booking/all/date/{bookTime}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ResponseRest>> getAllTableBookingsUsingGET(@ApiParam(value = "bookTime",required=true ) @PathVariable("bookTime") String bookTime) {
        // do some magic!
        return new ResponseEntity<List<ResponseRest>>(HttpStatus.OK);
    }


    @ApiOperation(value = "getAvailableTablesCount", notes = "", response = Integer.class, tags={ "table-booking-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Integer.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/booking/available/tables/date/{bookTime}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Integer> getAvailableTablesCountUsingGET(@ApiParam(value = "bookTime",required=true ) @PathVariable("bookTime") String bookTime) {
        // do some magic!
        return new ResponseEntity<Integer>(HttpStatus.OK);
    }


    @ApiOperation(value = "getBookingById", notes = "", response = ResponseRest.class, tags={ "table-booking-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseRest.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/booking/get/id/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseRest> getBookingByIdUsingGET(@ApiParam(value = "id",required=true ) @PathVariable("id") String id) {
        // do some magic!
        return new ResponseEntity<ResponseRest>(HttpStatus.OK);
    }


    @ApiOperation(value = "updateBooking", notes = "", response = ResponseRest.class, tags={ "table-booking-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseRest.class),
        @ApiResponse(code = 201, message = "Created", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/booking/update",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResponseRest> updateBookingUsingPOST(@ApiParam(value = "tableBooking" ,required=true )  @Valid @RequestBody TableBooking tableBooking) {
        // do some magic!
        return new ResponseEntity<ResponseRest>(HttpStatus.OK);
    }

}
