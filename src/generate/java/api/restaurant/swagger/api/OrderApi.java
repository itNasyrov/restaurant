/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package restaurant.swagger.api;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import restaurant.swagger.model.Order;
import restaurant.swagger.model.OrderItem;
import restaurant.swagger.model.ResponseRest;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-01-02T23:40:43.246+05:00")

@Api(value = "order", description = "the order API")
public interface OrderApi {

    @ApiOperation(value = "addItem", notes = "", response = ResponseRest.class, tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseRest.class),
        @ApiResponse(code = 201, message = "Created", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/order/additem/{id}",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResponseRest> addItemUsingPOST(@ApiParam(value = "id",required=true ) @PathVariable("id") String id,@ApiParam(value = "item" ,required=true )  @Valid @RequestBody OrderItem item) {
        // do some magic!
        return new ResponseEntity<ResponseRest>(HttpStatus.OK);
    }


    @ApiOperation(value = "addOrder", notes = "", response = ResponseRest.class, tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseRest.class),
        @ApiResponse(code = 201, message = "Created", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/order/add",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResponseRest> addOrderUsingPOST(@ApiParam(value = "order" ,required=true )  @Valid @RequestBody Order order) {
        // do some magic!
        return new ResponseEntity<ResponseRest>(HttpStatus.OK);
    }


    @ApiOperation(value = "changeStatus", notes = "", response = ResponseRest.class, tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseRest.class),
        @ApiResponse(code = 201, message = "Created", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/order/changestatus/{id}/{status}",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResponseRest> changeStatusUsingPOST(@ApiParam(value = "id",required=true ) @PathVariable("id") String id,@ApiParam(value = "status",required=true ) @PathVariable("status") String status) {
        // do some magic!
        return new ResponseEntity<ResponseRest>(HttpStatus.OK);
    }


    @ApiOperation(value = "deleteOrder", notes = "", response = ResponseRest.class, tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseRest.class),
        @ApiResponse(code = 204, message = "No Content", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class) })
    
    @RequestMapping(value = "/order/delete/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<ResponseRest> deleteOrderUsingDELETE(@ApiParam(value = "id",required=true ) @PathVariable("id") String id) {
        // do some magic!
        return new ResponseEntity<ResponseRest>(HttpStatus.OK);
    }


    @ApiOperation(value = "getListOrderByTable", notes = "", response = ResponseRest.class, responseContainer = "List", tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseRest.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/order/table/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ResponseRest>> getListOrderByTableUsingGET(@ApiParam(value = "id",required=true ) @PathVariable("id") String id) {
        // do some magic!
        return new ResponseEntity<List<ResponseRest>>(HttpStatus.OK);
    }


    @ApiOperation(value = "getOrderById", notes = "", response = ResponseRest.class, tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseRest.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/order/get/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseRest> getOrderByIdUsingGET(@ApiParam(value = "id",required=true ) @PathVariable("id") String id) {
        // do some magic!
        return new ResponseEntity<ResponseRest>(HttpStatus.OK);
    }


    @ApiOperation(value = "getOrderList", notes = "", response = ResponseRest.class, responseContainer = "List", tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseRest.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/order/all",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ResponseRest>> getOrderListUsingGET() {
        // do some magic!
        return new ResponseEntity<List<ResponseRest>>(HttpStatus.OK);
    }


    @ApiOperation(value = "LastOrder", notes = "", response = ResponseRest.class, tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseRest.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/order/lastorder/{table}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseRest> lastOrderUsingGET(@ApiParam(value = "table",required=true ) @PathVariable("table") String table) {
        // do some magic!
        return new ResponseEntity<ResponseRest>(HttpStatus.OK);
    }


    @ApiOperation(value = "StatusList", notes = "", response = ResponseRest.class, responseContainer = "List", tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseRest.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/order/status/{status}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ResponseRest>> statusListUsingGET(@ApiParam(value = "status",required=true ) @PathVariable("status") String status) {
        // do some magic!
        return new ResponseEntity<List<ResponseRest>>(HttpStatus.OK);
    }


    @ApiOperation(value = "updateOrder", notes = "", response = ResponseRest.class, tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseRest.class),
        @ApiResponse(code = 201, message = "Created", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/order/update",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResponseRest> updateOrderUsingPOST(@ApiParam(value = "order" ,required=true )  @Valid @RequestBody Order order) {
        // do some magic!
        return new ResponseEntity<ResponseRest>(HttpStatus.OK);
    }

}
